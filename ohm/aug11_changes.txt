diff --git a/daemon.c b/daemon.c
index feb4d2e..4e44d19 100644
--- a/daemon.c
+++ b/daemon.c
@@ -93,7 +93,8 @@ enum protoCmd rx_request(const struct protocol *req, int fd)
         reqnew->xmlname[0] = 0;
         req = reqnew;
     }
-    else if (req->ver != 2) {
+    // Version 3 of the protocol is for time queries TODO: Determine if we really want to do this here. Should it branch??
+    else if (req->ver != 2 && req->ver != 3) {
         syslog(LOG_ERR, "Bad protocol version %d", req->ver);
         return cmdIgnore;
     }
diff --git a/gen_tile.cpp b/gen_tile.cpp
index d134a63..a6bc483 100644
--- a/gen_tile.cpp
+++ b/gen_tile.cpp
@@ -240,7 +240,7 @@ static enum protoCmd render(Map &m, const char *tile_dir, char *xmlname, project
     mapnik::agg_renderer<mapnik::image_32> ren(m,buf);
     ren.apply();
 
-    xyz_to_path(filename, sizeof(filename), tile_dir, xmlname, x, y, z);
+    xyz_to_path(filename, sizeof(filename), tile_dir, xmlname, t, x, y, z);
     if (mkdirp(filename))
         return cmdNotDone;
     snprintf(tmp, sizeof(tmp), "%s.tmp", filename);
diff --git a/metatile.cpp b/metatile.cpp
index 404999d..49a4a21 100644
--- a/metatile.cpp
+++ b/metatile.cpp
@@ -52,7 +52,8 @@ const std::string metaTile::get(int x, int y) {
     return tile[x][y];
 }
 
-// Returns the offset within the meta-tile index table
+// Returns the offset within the meta-tile index
+// No need to ref t here - all tiles in the meta tile will be of the same t
 int metaTile::xyz_to_meta_offset(int x, int y, int z) {
     unsigned char mask = METATILE - 1;
     return (x & mask) * METATILE + (y & mask);
diff --git a/mod_tile.c b/mod_tile.c
index 4d33e2c..94d8ef3 100644
--- a/mod_tile.c
+++ b/mod_tile.c
@@ -202,7 +202,7 @@ static int request_tile(request_rec *r, struct protocol *cmd, int renderImmediat
     }
 
     // cmd has already been partial filled, fill in the rest
-    cmd->ver = PROTO_VER;
+    cmd->ver = PROTO_VER;    // this is set in protocol.h, set to 3 for time queries
     switch (renderImmediately) {
     case 0: { cmd->cmd = cmdDirty; break;}
     case 1: { cmd->cmd = cmdRender; break;}
@@ -211,7 +211,7 @@ static int request_tile(request_rec *r, struct protocol *cmd, int renderImmediat
 
     if (scfg->bulkMode) cmd->cmd = cmdRenderBulk; 
 
-    ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, "Requesting style(%s) z(%d) x(%d) y(%d) from renderer with priority %d", cmd->xmlname, cmd->z, cmd->x, cmd->y, cmd->cmd);
+    ap_log_rerror(APLOG_MARK, APLOG_INFO, 0, r, "Requesting style(%s) t(%s) z(%d) x(%d) y(%d) from renderer with priority %d", cmd->xmlname, cmd-> t, cmd->z, cmd->x, cmd->y, cmd->cmd);
     do {
         ret = send(fd, cmd, sizeof(struct protocol), 0);
 
@@ -250,7 +250,7 @@ static int request_tile(request_rec *r, struct protocol *cmd, int renderImmediat
                     break;
                 }
 
-                if (cmd->x == resp.x && cmd->y == resp.y && cmd->z == resp.z && !strcmp(cmd->xmlname, resp.xmlname)) {
+                if (cmd->t == resp.t && cmd->x == resp.x && cmd->y == resp.y && cmd->z == resp.z && !strcmp(cmd->xmlname, resp.xmlname)) {
                     close(fd);
                     if (resp.cmd == cmdDone)
                         return 1;
@@ -258,13 +258,13 @@ static int request_tile(request_rec *r, struct protocol *cmd, int renderImmediat
                         return 0;
                 } else {
                     ap_log_rerror(APLOG_MARK, APLOG_WARNING, 0, r,
-                       "Response does not match request: xml(%s,%s) z(%d,%d) x(%d,%d) y(%d,%d)", cmd->xmlname,
-                       resp.xmlname, cmd->z, resp.z, cmd->x, resp.x, cmd->y, resp.y);
+                       "Response does not match request: xml(%s,%s) t(%s,%s) z(%d,%d) x(%d,%d) y(%d,%d)", cmd->xmlname,
+                       resp.xmlname, cmd->t, resp.t, cmd->z, resp.z, cmd->x, resp.x, cmd->y, resp.y);
                 }
             } else {
                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
-                              "request_tile: Request xml(%s) z(%d) x(%d) y(%d) could not be rendered in %i seconds",
-                              cmd->xmlname, cmd->z, cmd->x, cmd->y,
+                              "request_tile: Request xml(%s) t(%s) z(%d) x(%d) y(%d) could not be rendered in %i seconds",
+                              cmd->xmlname, cmd->t, cmd->z, cmd->x, cmd->y,
                               (renderImmediately > 1?scfg->request_timeout_priority:scfg->request_timeout));
                 break;
             }
@@ -346,10 +346,10 @@ static enum tileState tile_state(request_rec *r, struct protocol *cmd)
     struct stat_info stat;
     struct tile_request_data * rdata = (struct tile_request_data *)ap_get_module_config(r->request_config, &tile_module);
 
-    stat = rdata->store->tile_stat(rdata->store, cmd->xmlname, cmd->x, cmd->y, cmd->z);
+    stat = rdata->store->tile_stat(rdata->store, cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z);
 
     ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_state: determined state of %s %i %i %i on store %pp: Tile size: %li, expired: %i created: %li",
-                      cmd->xmlname, cmd->x, cmd->y, cmd->z, rdata->store, stat.size, stat.expired, stat.mtime);
+                      cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z, rdata->store, stat.size, stat.expired, stat.mtime);
 
     r->finfo.mtime = stat.mtime * 1000000;
     r->finfo.atime = stat.atime * 1000000;
@@ -949,7 +949,7 @@ static int tile_handler_status(request_rec *r)
     state = tile_state(r, cmd);
     if (state == tileMissing)
         return error_message(r, "No tile could not be found at storage location: %s\n",
-                rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->x, cmd->y, cmd->z, storage_id));
+                rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z, storage_id));
     apr_ctime(mtime_str, r->finfo.mtime);
     apr_ctime(atime_str, r->finfo.atime);
 
@@ -957,7 +957,7 @@ static int tile_handler_status(request_rec *r)
                          "(Dates might not be accurate. Rendering time might be reset to an old date for tile expiry."
                          " Access times might not be updated on all file systems)\n",
                          (state == tileOld) ? "due to be rendered" : "clean", mtime_str, atime_str,
-                         rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->x, cmd->y, cmd->z, storage_id));
+                         rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z, storage_id));
 }
 
 /**
@@ -1139,7 +1139,7 @@ static int tile_handler_serve(request_rec *r)
         return HTTP_NOT_FOUND;
     }
 
-    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_handler_serve: xml(%s) z(%d) x(%d) y(%d)", cmd->xmlname, cmd->z, cmd->x, cmd->y);
+    ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_handler_serve: xml(%s) t(%s) z(%d) x(%d) y(%d)", cmd->xmlname, cmd->t, cmd->z, cmd->x, cmd->y);
 
     tile_configs = (tile_config_rec *) scfg->configs->elts;
 
@@ -1162,9 +1162,9 @@ static int tile_handler_serve(request_rec *r)
 
     err_msg[0] = 0;
 
-    len = rdata->store->tile_read(rdata->store, cmd->xmlname, cmd->x, cmd->y, cmd->z, buf, tile_max, &compressed, err_msg);
+    len = rdata->store->tile_read(rdata->store, cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z, buf, tile_max, &compressed, err_msg);
     ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r,
-                  "Read tile of length %i from %s: %s", len, rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->x, cmd->y, cmd->z, id), err_msg);
+                  "Read tile of length %i from %s: %s", len, rdata->store->tile_storage_id(rdata->store, cmd->xmlname, cmd->t, cmd->x, cmd->y, cmd->z, id), err_msg);
     if (len > 0) {
         if (compressed) {
             const char* accept_encoding = apr_table_get(r->headers_in,"Accept-Encoding");
@@ -1269,7 +1269,7 @@ static int tile_translate(request_rec *r)
                 return OK;
             }
 
-            n = sscanf(r->uri+strlen(tile_config->baseuri),"%d/%d/%d.%[a-z]/%10s", &(cmd->z), &(cmd->x), &(cmd->y), extension, option);
+            n = sscanf(r->uri+strlen(tile_config->baseuri),"%s/%d/%d/%d.%[a-z]/%10s", &(cmd->t), &(cmd->z), &(cmd->x), &(cmd->y), extension, option);
             if (n < 4) {
                 ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_translate: Invalid URL for tilelayer %s", tile_config->xmlname);
                 return DECLINED;
@@ -1322,8 +1322,8 @@ static int tile_translate(request_rec *r)
                 r->handler = "tile_serve";
             }
 
-            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_translate: op(%s) xml(%s) mime(%s) z(%d) x(%d) y(%d)",
-                    r->handler , cmd->xmlname, tile_config->mimeType, cmd->z, cmd->x, cmd->y);
+            ap_log_rerror(APLOG_MARK, APLOG_DEBUG, 0, r, "tile_translate: op(%s) xml(%s) mime(%s) t(%s) z(%d) x(%d) y(%d)",
+                    r->handler , cmd->xmlname, tile_config->mimeType, cmd->t, cmd->z, cmd->x, cmd->y);
 
             return OK;
         }
diff --git a/protocol.h b/protocol.h
index eb908d3..3ff5031 100644
--- a/protocol.h
+++ b/protocol.h
@@ -16,7 +16,7 @@ extern "C" {
  * causing responses to get slightly out of step with requests.
  */
 #define TILE_PATH_MAX (256)
-#define PROTO_VER (2)
+#define PROTO_VER (3)   // hard-coded to 3 to allow for time queries
 #define RENDER_SOCKET "/var/run/renderd/renderd.sock"
 #define XMLCONFIG_MAX 41
 
diff --git a/renderd.py b/renderd.py
index d836491..6af3aaf 100755
--- a/renderd.py
+++ b/renderd.py
@@ -55,6 +55,7 @@ class ProtocolPacket:
     def __init__(self, version, fields = ""):
         self.version = version
         self.xmlname = ""
+        self.t = 0
         self.x = 0
         self.y = 0
         self.z = 0
@@ -68,6 +69,7 @@ class ProtocolPacket:
 
     def bad_request(self):
         # Check that the requested (x,y,z) is invalid
+        t = self.t
         x = self.x
         y = self.y
         z = self.z
@@ -79,11 +81,12 @@ class ProtocolPacket:
             return True
         if (y < 0) or (y > limit):
             return True
+        # if (t outside of acceptable range) TODO: error check the t query string against available times?
         return False
 
     def meta_tuple(self):
         # This metatile tuple is used to identify duplicate request in the rendering queue
-        return (self.xmlname, self.mx, self.my, self.z)
+        return (self.xmlname, self.t, self.mx, self.my, self.z)
 
 class ProtocolPacketV1(ProtocolPacket):
     def __init__(self):
@@ -156,6 +159,46 @@ class ProtocolPacketV2(ProtocolPacket):
                if e[0] != errno.EBADF:
                    raise
 
+# Version 3 is used for time-based queries in the OHM
+class ProtocolPacketV3(ProtocolPacket):
+    def __init__(self):
+        ProtocolPacket(3)
+        self.fields = "5i41s5s62x"  # for year queries in the range of (-35000, 2014)
+
+    # t is at the end of the unpacked fields to prevent breaking the parser
+    # with additional padding to bring up to 128 bytes
+    def receive(self, data, dest):
+        version, request, x, y, z, xmlname, t = struct.unpack(self.fields, data)
+
+        if version != 3:
+            print "Received V3 packet with incorect version %d" % version
+        else:
+            print "Got V3 request, command(%d), xmlname(%s), t(%s), x(%d), y(%d), z(%d)" \
+                % (request, xmlname, t, x, y, z)
+            self.commandStatus = request
+            self.t = t
+            self.x = x
+            self.y = y
+            self.z = z
+            self.xmlname = xmlname.rstrip('\000') # Remove trailing NULs
+            # Calculate Meta-tile value for this x/y
+            self.mx = x & ~(METATILE-1)
+            self.my = y & ~(METATILE-1)
+            self.dest = dest
+
+    def send(self, status):
+        x = self.t
+        x = self.x
+        y = self.y
+        z = self.z
+        xmlname = self.xmlname
+        data = struct.pack(self.fields, 2, status, t, x, y, z, xmlname)
+        try:
+            self.dest.send(data)
+        except socket.error, e:
+               if e[0] != errno.EBADF:
+                   raise
+
 DEG_TO_RAD = pi/180
 RAD_TO_DEG = 180/pi
 
@@ -277,7 +320,7 @@ class RenderThread:
 
         return True;
 
-    def xyz_to_meta(self, xmlname, x,y, z):
+    def xyz_to_meta(self, xmlname, t, x,y, z):
         mask = METATILE -1
         x &= ~mask
         y &= ~mask
@@ -288,7 +331,7 @@ class RenderThread:
             x >>= 4
             y >>= 4
 
-        meta = "%s/%s/%d/%u/%u/%u/%u/%u.meta" % (self.tile_path, xmlname, z, hashes[4], hashes[3], hashes[2], hashes[1], hashes[0])
+        meta = "%s/%s/%s/%d/%u/%u/%u/%u/%u.meta" % (self.tile_path, xmlname, t, z, hashes[4], hashes[3], hashes[2], hashes[1], hashes[0])
         return meta
 
     def xyz_to_meta_offset(self, xmlname, x,y, z):
@@ -297,9 +340,9 @@ class RenderThread:
         return offset
 
 
-    def meta_save(self, xmlname, x, y, z, size, tiles):
+    def meta_save(self, xmlname, t, x, y, z, size, tiles):
         #print "Saving %d tiles" % (size * size)
-        meta_path = self.xyz_to_meta(xmlname, x, y, z)
+        meta_path = self.xyz_to_meta(xmlname, t,  x, y, z)
         d = os.path.dirname(meta_path)
         if not os.path.exists(d):
             try:
@@ -476,7 +519,9 @@ class ThreadedUnixStreamHandler(SocketServer.BaseRequestHandler):
         #print "%s: New connection" % cur_thread.getName()
         len_v1 = ProtocolPacketV1().len()
         len_v2 = ProtocolPacketV2().len()
+        len_v3 = ProtocolPacketV3().len()
         max_len = max(len_v1, len_v2)
+        max_len = max(max_len, len_v3)
 
         while True:
             try:
@@ -496,6 +541,10 @@ class ThreadedUnixStreamHandler(SocketServer.BaseRequestHandler):
                 req_v2 = ProtocolPacketV2()
                 req_v2.receive(data, self.request)
                 self.rx_request(req_v2)
+            if len(data) == len_v3:
+                req_v3 = ProtocolPacketV3()
+                req_v2.receive(data, self.request)
+                self.rx_request(req_v3)
             elif len(data) == 0:
                 #print "%s: Connection closed" % cur_thread.getName()
                 break
diff --git a/store_file.c b/store_file.c
index 2d0bdab..4be1afa 100644
--- a/store_file.c
+++ b/store_file.c
@@ -43,7 +43,7 @@ static time_t getPlanetTime(const char * tile_dir, const char * xmlname)
     return st_stat.st_mtime;
 }
 
-static int file_tile_read(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, char *buf, size_t sz, int * compressed, char * log_msg) {
+static int file_tile_read(struct storage_backend * store, const char *xmlconfig, char * t, int x, int y, int z, char *buf, size_t sz, int * compressed, char * log_msg) {
 
     char path[PATH_MAX];
     int meta_offset, fd;
@@ -52,7 +52,7 @@ static int file_tile_read(struct storage_backend * store, const char *xmlconfig,
     struct meta_layout *m = (struct meta_layout *)malloc(header_len);
     size_t file_offset, tile_size;
 
-    meta_offset = xyz_to_meta(path, sizeof(path), store->storage_ctx, xmlconfig, x, y, z);
+    meta_offset = xyz_to_meta(path, sizeof(path), store->storage_ctx, xmlconfig, t, x, y, z);
 
     fd = open(path, O_RDONLY);
     if (fd < 0) {
@@ -137,12 +137,12 @@ static int file_tile_read(struct storage_backend * store, const char *xmlconfig,
     return pos;
 }
 
-static struct stat_info file_tile_stat(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static struct stat_info file_tile_stat(struct storage_backend * store, const char *xmlconfig, char * t, int x, int y, int z) {
     struct stat_info tile_stat;
     struct stat st_stat;
     char meta_path[PATH_MAX];
 
-    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, x, y, z);
+    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, t, x, y, z);
     
     if (stat(meta_path, &st_stat)) {
         tile_stat.size = -1;
@@ -165,22 +165,22 @@ static struct stat_info file_tile_stat(struct storage_backend * store, const cha
     return tile_stat;
 }
 
-static char * file_tile_storage_id(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, char * string) {
+static char * file_tile_storage_id(struct storage_backend * store, const char *xmlconfig, char * t, int x, int y, int z, char * string) {
     char meta_path[PATH_MAX];
 
-    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, x, y, z);
+    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, t, x, y, z);
     snprintf(string, PATH_MAX - 1, "file://%s", meta_path);
     return string;
 }
     
 
-static int file_metatile_write(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, const char *buf, int sz) {
+static int file_metatile_write(struct storage_backend * store, const char *xmlconfig, char * t, int x, int y, int z, const char *buf, int sz) {
     int fd;
     char meta_path[PATH_MAX];
     char * tmp;
     int res;
  
-    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, x, y, z);
+    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, t, x, y, z);
     log_message(STORE_LOGLVL_DEBUG, "Creating and writing a metatile to %s\n", meta_path);
 
     tmp = malloc(sizeof(char) * strlen(meta_path) + 24);
@@ -217,19 +217,19 @@ static int file_metatile_write(struct storage_backend * store, const char *xmlco
 static int file_metatile_delete(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
     char meta_path[PATH_MAX];
 
-    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, x, y, z);
+    xyz_to_meta(meta_path, sizeof(meta_path), (char *)(store->storage_ctx), xmlconfig, t, x, y, z);
     log_message(STORE_LOGLVL_DEBUG, "Deleting metatile from %s\n", meta_path);
     return unlink(meta_path);
 }
 
-static int file_metatile_expire(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int file_metatile_expire(struct storage_backend * store, const char *xmlconfig, char * t, int x, int y, int z) {
 
     char name[PATH_MAX];
     struct stat s;
     static struct tm touchCalendar;
     struct utimbuf touchTime;
 
-    xyz_to_meta(name, sizeof(name), store->storage_ctx, xmlconfig, x, y, z);
+    xyz_to_meta(name, sizeof(name), store->storage_ctx, xmlconfig, t, x, y, z);
 
     if (stat(name, &s) == 0) {// 0 is success
         // tile exists on disk; mark it as expired
diff --git a/store_file_utils.c b/store_file_utils.c
index 35ad65e..8fd5b7a 100644
--- a/store_file_utils.c
+++ b/store_file_utils.c
@@ -82,7 +82,7 @@ static int check_xyz(int x, int y, int z) {
     return oob;
 }
 
-void xyz_to_path(char *path, size_t len, const char *tile_dir, const char *xmlconfig, int x, int y, int z)
+void xyz_to_path(char *path, size_t len, const char *tile_dir, const char *xmlconfig, char *t, int x, int y, int z)
 {
 #ifdef DIRECTORY_HASH
     // We attempt to cluster the tiles so that a 16x16 square of tiles will be in a single directory
@@ -95,9 +95,9 @@ void xyz_to_path(char *path, size_t len, const char *tile_dir, const char *xmlco
         x >>= 4;
         y >>= 4;
     }
-    snprintf(path, len, "%s/%s/%d/%u/%u/%u/%u/%u.png", tile_dir, xmlconfig, z, hash[4], hash[3], hash[2], hash[1], hash[0]);
+    snprintf(path, len, "%s/%s/%s/%d/%u/%u/%u/%u/%u.png", tile_dir, xmlconfig, t, z, hash[4], hash[3], hash[2], hash[1], hash[0]);
 #else
-    snprintf(path, len, TILE_PATH "/%s/%d/%d/%d.png", xmlconfig, z, x, y);
+    snprintf(path, len, TILE_PATH "/%s/%s/%d/%d/%d.png", xmlconfig, t, z, x, y);
 #endif
     return;
 }
@@ -148,7 +148,7 @@ int path_to_xyz(const char *tilepath, const char *path, char *xmlconfig, int *px
 
 #ifdef METATILE
 // Returns the path to the meta-tile and the offset within the meta-tile
-int xyz_to_meta(char *path, size_t len, const char *tile_dir, const char *xmlconfig, int x, int y, int z)
+int xyz_to_meta(char *path, size_t len, const char *tile_dir, const char *xmlconfig, char *t,  int x, int y, int z)
 {
     unsigned char i, hash[5], offset, mask;
 
@@ -165,9 +165,9 @@ int xyz_to_meta(char *path, size_t len, const char *tile_dir, const char *xmlcon
         y >>= 4;
     }
 #ifdef DIRECTORY_HASH
-    snprintf(path, len, "%s/%s/%d/%u/%u/%u/%u/%u.meta", tile_dir, xmlconfig, z, hash[4], hash[3], hash[2], hash[1], hash[0]);
+    snprintf(path, len, "%s/%s/%s/%d/%u/%u/%u/%u/%u.meta", tile_dir, xmlconfig, t, z, hash[4], hash[3], hash[2], hash[1], hash[0]);
 #else
-    snprintf(path, len, "%s/%s/%d/%u/%u.meta", tile_dir, xmlconfig, z, x, y);
+    snprintf(path, len, "%s/%s/%s/%d/%u/%u.meta", tile_dir, xmlconfig, t, z, x, y);
 #endif
     return offset;
 }
diff --git a/store_file_utils.h b/store_file_utils.h
index 40e167b..a79f0d5 100644
--- a/store_file_utils.h
+++ b/store_file_utils.h
@@ -19,14 +19,14 @@ int mkdirp(const char *path);
  * The two must both agree on the file layout for meta-tiling
  * to work
  */
-void xyz_to_path(char *path, size_t len, const char *tile_dir, const char *xmlconfig, int x, int y, int z);
+void xyz_to_path(char *path, size_t len, const char *tile_dir, const char *xmlconfig, char *t, int x, int y, int z);
 
-int path_to_xyz(const char *tilepath, const char *path, char *xmlconfig, int *px, int *py, int *pz);
+int path_to_xyz(const char *tilepath, const char *path, char *xmlconfig, char *t, int *px, int *py, int *pz);
 
 #ifdef METATILE
 /* New meta-tile storage functions */
 /* Returns the path to the meta-tile and the offset within the meta-tile */
-int xyz_to_meta(char *path, size_t len, const char *tile_dir, const char *xmlconfig, int x, int y, int z);
+int xyz_to_meta(char *path, size_t len, const char *tile_dir, const char *xmlconfig, char *t, int x, int y, int z);
 #endif
 
 #ifdef __cplusplus
diff --git a/store_memcached.c b/store_memcached.c
index 9b79783..6adf537 100644
--- a/store_memcached.c
+++ b/store_memcached.c
@@ -26,7 +26,7 @@
 
 
 #ifdef HAVE_LIBMEMCACHED
-static char * memcached_xyz_to_storagekey(const char *xmlconfig, int x, int y, int z, char * key) {
+static char * memcached_xyz_to_storagekey(const char *xmlconfig, char *t, int x, int y, int z, char * key) {
     int mask;
 
     mask = METATILE - 1;
@@ -54,7 +54,7 @@ static int memcached_tile_read(struct storage_backend * store, const char *xmlco
     mask = METATILE - 1;
     meta_offset = (x & mask) * METATILE + (y & mask);
 
-    memcached_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    memcached_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     buf_raw = memcached_get(store->storage_ctx, meta_path, strlen(meta_path), &len, &flags, &rc);
 
     if (rc != MEMCACHED_SUCCESS) {
@@ -111,7 +111,7 @@ static struct stat_info memcached_tile_stat(struct storage_backend * store, cons
     mask = METATILE - 1;
     offset = (x & mask) * METATILE + (y & mask);
 
-    memcached_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    memcached_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     buf = memcached_get(store->storage_ctx, meta_path, strlen(meta_path), &len, &flags, &rc);
 
     if (rc != MEMCACHED_SUCCESS) {
@@ -180,7 +180,7 @@ static int memcached_metatile_delete(struct storage_backend * store, const char
     char meta_path[PATH_MAX];
     memcached_return_t rc;
 
-    memcached_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    memcached_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
 
     rc = memcached_delete(store->storage_ctx, meta_path, strlen(meta_path), 0);
 
@@ -200,7 +200,7 @@ static int memcached_metatile_expire(struct storage_backend * store, const char
     uint64_t cas;
     memcached_return_t rc;
 
-    memcached_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    memcached_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     buf = memcached_get(store->storage_ctx, meta_path, strlen(meta_path), &len, &flags, &rc);
 
     if (rc != MEMCACHED_SUCCESS) {
diff --git a/store_rados.c b/store_rados.c
index d63ebe6..9cd865e 100644
--- a/store_rados.c
+++ b/store_rados.c
@@ -34,6 +34,7 @@ static pthread_mutex_t qLock;
 
 struct metadata_cache {
     char * data;
+    char * t = "year"; // set default to current year to prevent breaking non-historical searches
     int x,y,z;
     char xmlname[XMLCONFIG_MAX];
 };
@@ -45,7 +46,7 @@ struct rados_ctx {
     struct metadata_cache metadata_cache;
 };
 
-static char * rados_xyz_to_storagekey(const char *xmlconfig, int x, int y, int z, char * key) {
+static char * rados_xyz_to_storagekey(const char *xmlconfig, char *t, int x, int y, int z, char * key) {
     int mask;
 
     mask = METATILE - 1;
@@ -73,7 +74,7 @@ static char * read_meta_data(struct storage_backend * store, const char *xmlconf
         return ctx->metadata_cache.data;
     } else {
         //log_message(STORE_LOGLVL_DEBUG, "Retrieving fresh metadata");
-        rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+        rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
         err = rados_read(ctx->io, meta_path, ctx->metadata_cache.data, header_len, 0);
 
         if (err < 0) {
@@ -110,7 +111,7 @@ static int rados_tile_read(struct storage_backend * store, const char *xmlconfig
     mask = METATILE - 1;
     meta_offset = (x & mask) * METATILE + (y & mask);
 
-    rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
 
     buf_raw = read_meta_data(store, xmlconfig, x, y, z);
     if (buf_raw == NULL) {
@@ -159,7 +160,7 @@ static int rados_tile_read(struct storage_backend * store, const char *xmlconfig
     return tile_size;
 }
 
-static struct stat_info rados_tile_stat(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static struct stat_info rados_tile_stat(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
     struct stat_info tile_stat;
     unsigned int header_len = sizeof(struct meta_layout) + METATILE*METATILE*sizeof(struct entry);
     char * buf;
@@ -188,12 +189,12 @@ static struct stat_info rados_tile_stat(struct storage_backend * store, const ch
 static char * rados_tile_storage_id(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, char * string) {
     char meta_path[PATH_MAX];
 
-    rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     snprintf(string,PATH_MAX - 1, "rados://%s/%s", ((struct rados_ctx *) (store->storage_ctx))->pool, meta_path);
     return string;
 }
 
-static int rados_metatile_write(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, const char *buf, int sz) {
+static int rados_metatile_write(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z, const char *buf, int sz) {
     char meta_path[PATH_MAX];
     char tmp[PATH_MAX];
     struct stat_info tile_stat;
@@ -210,7 +211,7 @@ static int rados_metatile_write(struct storage_backend * store, const char *xmlc
     memcpy(buf2, &tile_stat, sizeof(tile_stat));
     memcpy(buf2 + sizeof(tile_stat), buf, sz);
 
-    rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     log_message(STORE_LOGLVL_DEBUG, "Trying to create and write a tile to %s\n", rados_tile_storage_id(store, xmlconfig, x, y, z, tmp));
 
     err = rados_write_full(((struct rados_ctx *)store->storage_ctx)->io, meta_path, buf2, sz2);
@@ -225,13 +226,13 @@ static int rados_metatile_write(struct storage_backend * store, const char *xmlc
 }
 
 
-static int rados_metatile_delete(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int rados_metatile_delete(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
     struct rados_ctx * ctx = (struct rados_ctx *)store->storage_ctx;
     char meta_path[PATH_MAX];
     char tmp[PATH_MAX];
     int err;
 
-    rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
 
     err =  rados_remove(ctx->io, meta_path);
 
@@ -243,7 +244,7 @@ static int rados_metatile_delete(struct storage_backend * store, const char *xml
     return 0;
 }
 
-static int rados_metatile_expire(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int rados_metatile_expire(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
 
     struct stat_info tile_stat;
     struct rados_ctx * ctx = (struct rados_ctx *)store->storage_ctx;
@@ -251,7 +252,7 @@ static int rados_metatile_expire(struct storage_backend * store, const char *xml
     char tmp[PATH_MAX];
     int err;
 
-    rados_xyz_to_storagekey(xmlconfig, x, y, z, meta_path);
+    rados_xyz_to_storagekey(xmlconfig, t, x, y, z, meta_path);
     err = rados_read(ctx->io, meta_path, (char *)&tile_stat, sizeof(struct stat_info), 0);
 
     if (err < 0) {
diff --git a/store_ro_http_proxy.c b/store_ro_http_proxy.c
index e0f7609..57fff36 100644
--- a/store_ro_http_proxy.c
+++ b/store_ro_http_proxy.c
@@ -26,6 +26,7 @@ static int done_global_init = 0;
 struct tile_cache {
     struct stat_info st_stat;
     char * tile;
+    char * t = "year"
     int x,y,z;
     char xmlname[XMLCONFIG_MAX];
 };
@@ -58,12 +59,12 @@ static size_t write_memory_callback(void *contents, size_t size, size_t nmemb, v
   return realsize;
 }
 
-static char * ro_http_proxy_xyz_to_storagekey(struct storage_backend * store, int x, int y, int z, char * key) {
+static char * ro_http_proxy_xyz_to_storagekey(struct storage_backend * store, char *t, int x, int y, int z, char * key) {
     snprintf(key,PATH_MAX - 1, "http://%s/%i/%i/%i.png", ((struct ro_http_proxy_ctx *) (store->storage_ctx))->baseurl, z, x, y);
     return key;
 }
 
-static int ro_http_proxy_tile_retrieve(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int ro_http_proxy_tile_retrieve(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
     struct ro_http_proxy_ctx * ctx = (struct ro_http_proxy_ctx *)(store->storage_ctx);
     char * path;
     CURLcode res;
@@ -129,10 +130,10 @@ static int ro_http_proxy_tile_retrieve(struct storage_backend * store, const cha
     }
 }
 
-static int ro_http_proxy_tile_read(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, char *buf, size_t sz, int * compressed, char * log_msg) {
+static int ro_http_proxy_tile_read(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z, char *buf, size_t sz, int * compressed, char * log_msg) {
     struct ro_http_proxy_ctx * ctx = (struct ro_http_proxy_ctx *)(store->storage_ctx);
 
-    if (ro_http_proxy_tile_retrieve(store, xmlconfig, x, y, z) > 0) {
+    if (ro_http_proxy_tile_retrieve(store, xmlconfig, t, x, y, z) > 0) {
         if (ctx->cache.st_stat.size > sz) {
             log_message(STORE_LOGLVL_ERR, "ro_http_proxy_tile_read: size was too big, overrun %i %i", sz, ctx->cache.st_stat.size);
             return -1;
@@ -145,11 +146,11 @@ static int ro_http_proxy_tile_read(struct storage_backend * store, const char *x
     }
 }
 
-static struct stat_info ro_http_proxy_tile_stat(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static struct stat_info ro_http_proxy_tile_stat(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
     struct stat_info tile_stat;
     struct ro_http_proxy_ctx * ctx = (struct ro_http_proxy_ctx *)(store->storage_ctx);
 
-    if (ro_http_proxy_tile_retrieve(store, xmlconfig, x, y, z) > 0) {
+    if (ro_http_proxy_tile_retrieve(store, xmlconfig, t, x, y, z) > 0) {
         return ctx->cache.st_stat;
     } else {
         tile_stat.size = -1;
@@ -162,23 +163,23 @@ static struct stat_info ro_http_proxy_tile_stat(struct storage_backend * store,
 }
 
 
-static char * ro_http_proxy_tile_storage_id(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, char * string) {
+static char * ro_http_proxy_tile_storage_id(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z, char * string) {
 
-    return ro_http_proxy_xyz_to_storagekey(store, x, y, z, string);
+    return ro_http_proxy_xyz_to_storagekey(store, t, x, y, z, string);
 }
 
-static int ro_http_proxy_metatile_write(struct storage_backend * store, const char *xmlconfig, int x, int y, int z, const char *buf, int sz) {
+static int ro_http_proxy_metatile_write(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z, const char *buf, int sz) {
     log_message(STORE_LOGLVL_ERR, "ro_http_proxy_metatile_write: This is a readonly storage backend. Write functionality isn't implemented");
     return -1;
 }
 
 
-static int ro_http_proxy_metatile_delete(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int ro_http_proxy_metatile_delete(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
     log_message(STORE_LOGLVL_ERR, "ro_http_proxy_metatile_expire: This is a readonly storage backend. Write functionality isn't implemented");
     return -1;
 }
 
-static int ro_http_proxy_metatile_expire(struct storage_backend * store, const char *xmlconfig, int x, int y, int z) {
+static int ro_http_proxy_metatile_expire(struct storage_backend * store, const char *xmlconfig, char *t, int x, int y, int z) {
 
     log_message(STORE_LOGLVL_ERR, "ro_http_proxy_metatile_expire: This is a readonly storage backend. Write functionality isn't implemented");
     return -1;
